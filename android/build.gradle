android {
    namespace "com.mygdx.game"
    buildToolsVersion "34.0.0"
    compileSdkVersion 34
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "com.mygdx.game"
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// Define paths fuera de las clausuras de la tarea
def armeabiV7aDir = layout.projectDirectory.dir("libs/armeabi-v7a/")
def arm64V8aDir = layout.projectDirectory.dir("libs/arm64-v8a/")
def x86_64Dir = layout.projectDirectory.dir("libs/x86_64/")
def x86Dir = layout.projectDirectory.dir("libs/x86/")

tasks.register('copyAndroidNatives', Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.natives.files.collect { jar ->
            zipTree(jar).matching {
                include "*.so"
            }
        }
    }
    into armeabiV7aDir
    into arm64V8aDir
    into x86_64Dir
    into x86Dir
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mygdx.game/com.mygdx.game.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
